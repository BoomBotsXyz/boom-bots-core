import hardhat from "hardhat";
const { ethers } = hardhat;
const { provider } = ethers;
import { BigNumber as BN, BigNumberish } from "ethers";
import { config as dotenv_config } from "dotenv";
dotenv_config();

const accounts = JSON.parse(process.env.ACCOUNTS || "{}");
const boombotseth = new ethers.Wallet(accounts.boombotseth.key, provider);
const blasttestnetuser2 = new ethers.Wallet(accounts.blasttestnetuser2.key, provider);

import { BoomBots, BoomBotAccount, ModulePack100, BoomBotsFactory, DataStore } from "../../typechain-types";

import { delay } from "./../utils/misc";
import { isDeployed, expectDeployed } from "./../utils/expectDeployed";
import { logContractAddress } from "./../utils/logContractAddress";
import { getNetworkSettings } from "./../utils/getNetworkSettings";
import { deployContractUsingContractFactory, verifyContract } from "./../utils/deployContract";
import { toBytes32 } from "./../utils/setStorage";
import { getSelectors, FacetCutAction, calcSighash, calcSighashes, getCombinedAbi } from "./../utils/diamond"
import { MulticallProvider, MulticallContract } from "./../utils/multicall";
import { multicallChunked } from "./../utils/network";

const { AddressZero, WeiPerEther, MaxUint256 } = ethers.constants;

let networkSettings: any;
let chainID: number;

const fs = require("fs")
const ABI_MULTICALL = JSON.parse(fs.readFileSync("data/abi/other/Multicall3.json").toString())
const ABI_BOOM_BOTS_NFT = JSON.parse(fs.readFileSync("data/abi/BoomBots/tokens/BoomBots.json").toString())
let mcProvider = new MulticallProvider(provider, 168587773);

const ERC6551_REGISTRY_ADDRESS        = "0x000000006551c19487814612e58FE06813775758";
const BOOM_BOTS_NFT_ADDRESS           = "0x2b119FA2796215f627344509581D8F39D742317F";
const ACCOUNT_IMPLEMENTATION_ADDRESS  = "0xf24f3A8a7D49031eD95EBD13774BA77a6a470b80";
const MODULE_PACK_100_ADDRESS         = "0xdD0b84cB4DA1a1D1c262Cc4009036417BB3165eb";
const DATA_STORE_ADDRESS              = "0xaf724B10370130c1E106FdA3da0b71D812A570d8";
const BOOM_BOTS_FACTORY_ADDRESS       = "0x53A4f1C1b2D9603B3D3ae057B075a0EDC3d7A615";

let boomBotsNft: BoomBots;
let boomBotsNftMC: any;
let accountImplementation: BoomBotAccount; // the base implementation for boom bot accounts
let modulePack100: ModulePack100;
let dataStore: DataStore;
let factory: BoomBotsFactory;

let abi = getCombinedAbi([
  "artifacts/contracts/accounts/BoomBotAccount.sol/BoomBotAccount.json",
  "artifacts/contracts/modules/ModulePack100.sol/ModulePack100.json",
  "artifacts/contracts/libraries/Errors.sol/Errors.json",
])


async function main() {
  console.log(`Using ${boombotseth.address} as boombotseth`);
  console.log(`Using ${blasttestnetuser2.address} as blasttestnetuser2`);

  chainID = (await provider.getNetwork()).chainId;
  networkSettings = getNetworkSettings(chainID);
  function isChain(chainid: number, chainName: string) {
    return ((chainID == chainid)/* || ((chainID == 31337) && (process.env.FORK_NETWORK === chainName))*/);
  }
  if(!isChain(168587773, "blastsepolia")) throw("Only run this on Blast Sepolia. Cannot use a local fork");

  //await fundBot123();
  await useBot123();
}

async function fundBot123() {
  console.log("Funding bot 123")
  let botID123 = 123
  let botAddress123 = "0x944fE5d55825574C3491d5119171B90398409b62"
  let tx = await blasttestnetuser2.sendTransaction({
    to: botAddress123,
    data: "0x",
    value: WeiPerEther.mul(5).div(1000)
  })
  console.log('tx')
  console.log(tx)
  await tx.wait(networkSettings.confirmations)
  console.log("Funded bot 123")
}

async function useBot123() {
  console.log("Using bot 123")
  let botID123 = 123
  let botAddress123 = "0x944fE5d55825574C3491d5119171B90398409b62"
  let accountProxy123 = await ethers.getContractAt(abi, botAddress123, blasttestnetuser2);

  /*
  // describe
  console.log("Describing")
  let token = await accountProxy123.token();
  console.log('token')
  console.log(token)
  let owner = await accountProxy123.owner();
  console.log('owner')
  console.log(owner)
  console.log(owner == blasttestnetuser2.address)
  */

  let fundBot123 = {
    description: "Fund Bot 123",
    as: "eoa",
    to: botAddress123,
    value: WeiPerEther.mul(1).div(100),
    data: "0x",
    operation: 0,
    gasLimit: 50_000,
  }
  let wrapEth = {
    description: "Wrap ETH",
    as: "bot",
    to: "0x4200000000000000000000000000000000000023",
    value: WeiPerEther.mul(1).div(1000),
    data: "0xd0e30db0",
    operation: 0,
    gasLimit: 150_000,
  }
  let buyUsdt = {
    description: "Buy USDT",
    as: "bot",
    to: "0x334e3F7f5A9740627fA47Fa9Aa51cE0ccbD765cF", // ring protocol universal router
    value: WeiPerEther.mul(1).div(1000),
    //data: "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000065b3566a00000000000000000000000000000000000000000000000000000000000000020b230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001cde0ee077b48b1d00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000798de0520497e28e8ebff0df1d791c2e942ea881000000000000000000000000d8f6a67d198485335daf4aadeb74358bc021410d",
    data: "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000077b3566a00000000000000000000000000000000000000000000000000000000000000020b230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001cde0ee077b48b1d00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000798de0520497e28e8ebff0df1d791c2e942ea881000000000000000000000000d8f6a67d198485335daf4aadeb74358bc021410d",
    operation: 0,
    gasLimit: 400_000,
  }
  let buyUsdc = {
    description: "Buy USDC",
    as: "bot",
    to: "0x334e3F7f5A9740627fA47Fa9Aa51cE0ccbD765cF", // ring protocol universal router
    value: WeiPerEther.mul(1).div(1000),
    data: "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000077b3566a00000000000000000000000000000000000000000000000000000000000000020b230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fb1aa00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000798de0520497e28e8ebff0df1d791c2e942ea881000000000000000000000000a7870cf9143084ed04f4c2311f48cb24a2b4a097",
    operation: 0,
    gasLimit: 400_000,
  }
  let buyDai = {
    description: "Buy DAI",
    as: "bot",
    to: "0x334e3F7f5A9740627fA47Fa9Aa51cE0ccbD765cF", // ring protocol universal router
    value: WeiPerEther.mul(1).div(1000),
    data: "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000077b3566a00000000000000000000000000000000000000000000000000000000000000020b230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002123e1957fe74bf300000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000798de0520497e28e8ebff0df1d791c2e942ea8810000000000000000000000009db240312deefec82687405a4cf42511032d55d8",
    operation: 0,
    gasLimit: 400_000,
  }
  let buyBolt = {
    description: "Buy BOLT",
    as: "bot",
    to: "0x334e3F7f5A9740627fA47Fa9Aa51cE0ccbD765cF", // ring protocol universal router
    value: WeiPerEther.mul(1).div(1000),
    data: "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000077b3566a00000000000000000000000000000000000000000000000000000000000000020b230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c44ac641b624a17e43fea00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000798de0520497e28e8ebff0df1d791c2e942ea8810000000000000000000000000ef98e6f5268747b52f2b139de23981b776b314a",
    operation: 0,
    gasLimit: 400_000,
  }
  let buyRgb = {
    description: "Buy RGB",
    as: "bot",
    to: "0x334e3F7f5A9740627fA47Fa9Aa51cE0ccbD765cF", // ring protocol universal router
    value: WeiPerEther.mul(1).div(1000),
    data: "0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000077b3566a00000000000000000000000000000000000000000000000000000000000000020b230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e1eb59d5cb1f2c5500000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000798de0520497e28e8ebff0df1d791c2e942ea8810000000000000000000000009bf7537ce9f808c845d5cfe1e94c856a74fa56d7",
    operation: 0,
    gasLimit: 400_000,
  }
  let commands = [
    //fundBot123,
    //wrapEth,
    //buyUsdt,
    //buyUsdc,
    //buyDai,
    //buyBolt, // likely failed due to slippage
    //buyRgb,
  ]
  for(let i = 0; i < commands.length; i++) {
    let command = commands[i]
    let { description, to, value, data, operation, gasLimit, as } = command
    console.log(`Executing command ${i}: ${description}`)
    var tx
    if(as == "eoa") {
      tx = await blasttestnetuser2.sendTransaction({ to, value, data, gasLimit, ...networkSettings.overrides })
    } else if(as == "bot") {
      tx = await accountProxy123.connect(blasttestnetuser2).execute(to, value, data, operation, {...networkSettings.overrides, gasLimit})
    } else {
      throw new Error(`Unknown as '${as}'`)
    }
    console.log('tx')
    console.log(tx)
    await tx.wait(networkSettings.confirmations)
    console.log(`Executed command  ${i}: ${description}`)
  }
}

main()
    .then(() => process.exit(0))
    .catch(error => {
        console.error(error);
        process.exit(1);
  });
